name: Daily Outcome Check (No-Show Detection)

on:
  schedule:
    # Täglich um 21:00 Uhr Berlin Zeit (20:00 UTC im Sommer, 19:00 UTC im Winter)
    - cron: '0 19 * * *'  # 19:00 UTC = 21:00 Berlin (Sommerzeit)
  workflow_dispatch:  # Manuell auslösbar

jobs:
  check-outcomes:
    runs-on: ubuntu-latest
    env:
      GOOGLE_CREDS_BASE64: ${{ secrets.GOOGLE_CREDS_BASE64 }}
      CENTRAL_CALENDAR_ID: ${{ secrets.CENTRAL_CALENDAR_ID || 'zentralkalenderzfa@gmail.com' }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 📂 Ensure Tracking Directory Exists
        run: |
          mkdir -p data/tracking
          # Erstelle leere JSON Dateien falls sie nicht existieren
          if [ ! -f data/tracking/daily_metrics.json ]; then
            echo "{}" > data/tracking/daily_metrics.json
          fi
          if [ ! -f data/tracking/bookings.jsonl ]; then
            touch data/tracking/bookings.jsonl
          fi
          if [ ! -f data/tracking/outcomes.jsonl ]; then
            touch data/tracking/outcomes.jsonl
          fi
          echo "✅ Tracking directory prepared"

      - name: 🔍 Run Daily Outcome Check
        run: |
          echo "🕐 Starting daily outcome check at $(date)"
          python run_tracking.py || echo "⚠️ Tracking completed with warnings"
          echo "✅ Outcome check completed"

          # Verify files were created
          echo "📋 Verifying tracking files were created:"
          if [ -f "data/tracking/daily_metrics.json" ]; then
            echo "✅ daily_metrics.json created ($(wc -c < data/tracking/daily_metrics.json) bytes)"
          else
            echo "❌ daily_metrics.json missing"
          fi

          if [ -f "data/tracking/outcomes.jsonl" ]; then
            echo "✅ outcomes.jsonl updated ($(wc -l < data/tracking/outcomes.jsonl) lines)"
          else
            echo "❌ outcomes.jsonl missing"
          fi

          if [ -f "data/tracking/customer_profiles.json" ]; then
            echo "✅ customer_profiles.json updated ($(wc -c < data/tracking/customer_profiles.json) bytes)"
          else
            echo "❌ customer_profiles.json missing"
          fi

      - name: 📊 Generate Daily Report
        run: |
          python -c "
          import os
          import json
          from datetime import datetime
          
          # Sicherstellen dass das Verzeichnis existiert
          os.makedirs('data/tracking', exist_ok=True)
          
          try:
              from tracking_system import BookingTracker
              tracker = BookingTracker()
              
              # Generiere Wochenbericht
              report = tracker.get_weekly_report()
              
              # Speichere als JSON
              with open('data/tracking/latest_weekly_report.json', 'w') as f:
                  json.dump(report, f, indent=2, ensure_ascii=False)
              
              print('📊 Weekly report generated')
          except Exception as e:
              print(f'⚠️ Report generation skipped: {e}')
              # Erstelle leeren Report
              empty_report = {
                  'week': datetime.now().isocalendar()[1],
                  'year': datetime.now().year,
                  'metrics': {
                      'total_bookings': 0,
                      'total_outcomes': 0,
                      'no_shows': 0,
                      'completed': 0
                  }
              }
              with open('data/tracking/latest_weekly_report.json', 'w') as f:
                  json.dump(empty_report, f, indent=2)
          "

          # Verify report was created
          echo "📊 Verifying weekly report creation:"
          if [ -f "data/tracking/latest_weekly_report.json" ]; then
            echo "✅ latest_weekly_report.json created ($(wc -c < data/tracking/latest_weekly_report.json) bytes)"
          else
            echo "❌ latest_weekly_report.json missing"
          fi

      - name: 💾 Commit Tracking Data
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Debug: Check what files exist
          echo "📁 Files in data/tracking directory:"
          ls -la data/tracking/ || echo "❌ No tracking directory found"

          echo "🔍 Git status before staging:"
          git status --porcelain

          # Add files explicitly with better error handling
          echo "📝 Staging files..."

          # Stage JSON files individually
          if [ -f "data/tracking/daily_metrics.json" ]; then
            git add data/tracking/daily_metrics.json
            echo "✅ Added daily_metrics.json"
          else
            echo "⚠️ daily_metrics.json not found"
          fi

          if [ -f "data/tracking/latest_weekly_report.json" ]; then
            git add data/tracking/latest_weekly_report.json
            echo "✅ Added latest_weekly_report.json"
          else
            echo "⚠️ latest_weekly_report.json not found"
          fi

          if [ -f "data/tracking/customer_profiles.json" ]; then
            git add data/tracking/customer_profiles.json
            echo "✅ Added customer_profiles.json"
          else
            echo "⚠️ customer_profiles.json not found"
          fi

          # Stage JSONL files
          for file in data/tracking/*.jsonl; do
            if [ -f "$file" ]; then
              git add "$file"
              echo "✅ Added $(basename "$file")"
            fi
          done

          echo "🔍 Git status after staging:"
          git status --porcelain

          echo "📋 Staged changes:"
          git diff --staged --name-only || echo "No staged files"

          # Commit nur wenn es Änderungen gibt
          if git diff --staged --quiet; then
            echo "❌ No changes to commit"
          else
            echo "✅ Committing changes..."
            git commit -m "📊 Auto: Daily outcome check & tracking update [skip ci]

            - No-Shows detected and tracked
            - Daily metrics calculated
            - Weekly report updated
            - Timestamp: $(date '+%Y-%m-%d %H:%M:%S')"

            git push
            echo "🚀 Changes pushed to repository"
          fi

      - name: 🚨 Check for High No-Show Rate
        run: |
          python -c "
          import json
          import os
          from datetime import datetime
          
          metrics_file = 'data/tracking/daily_metrics.json'
          if os.path.exists(metrics_file) and os.path.getsize(metrics_file) > 0:
              try:
                  with open(metrics_file, 'r') as f:
                      metrics = json.load(f)
                  
                  today = datetime.now().strftime('%Y-%m-%d')
                  today_metrics = metrics.get(today, {})
                  
                  no_show_rate = today_metrics.get('no_show_rate', 0)
                  
                  if no_show_rate > 20:
                      print(f'⚠️ WARNUNG: Hohe No-Show Rate heute: {no_show_rate}%')
                      print(f'   - Total: {today_metrics.get(\"total_slots\", 0)} Termine')
                      print(f'   - No-Shows: {today_metrics.get(\"no_shows\", 0)}')
                      print(f'   - Abgeschlossen: {today_metrics.get(\"completed\", 0)}')
                  else:
                      print(f'✅ No-Show Rate normal: {no_show_rate}%')
              except Exception as e:
                  print(f'ℹ️ Keine Metriken verfügbar: {e}')
          else:
              print('ℹ️ Noch keine Tracking-Daten vorhanden')
          " || true  # Fehler ignorieren
